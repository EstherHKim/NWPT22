<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.5//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_5.dtd'>
<nta>
	<declaration>// Global time. One time unit in Uppaal represents 1 minute
const int m = 1; // 1 minute = 1 time unit
const int h = 60*m; // 1 hour = 60 minutes
clock t; // global time [min]

// Urban catchment
const double UC_k = 0.25; // Urban surface resevoir reaction factor [cm/min * 1 / cm]
const double A_UC = 37.0 * 10000.0 * 10000.0; // urban area catchment [cm2], 1 ha = 10000 m2, 1 m2 = 10000 cm2 = [cm/(min*cm)]
double rain = 0.0; // Rainfall [cm/min]
clock S_UC = 0.0; // Water surface height urban catchment [cm]

// Rain detention pond
const int W = 300; // max water height [cm]
clock w = 100.0; // water level in pond [cm]
double Qout = 0.0; // pond outflow [cm3/min], will be properly initialized in Controller
clock o = 0.0; // accumelated overflow time [min]

// Cost function
clock c = 0.0; // cost function [-]

//.....................
// Esther 
//.....................

const int A = 8;

// Sensor for reading pond's water height with uniform distribution 
double w_ud = 0.0;
//double w_ud[A];
//double w_udpo[A];

// Sensor for reading pond's water height with normal distribution 
double w_gd = 0.0;
//double w_gd[A];
//double w_gdpo[A];

// Cost function
clock c1 = 0.0; // cost function [-]
clock c2 = 0.0; // cost function [-]
clock c3 = 0.0; // cost function [-]

// Rain detention pond
//const int WR = 300 * 0.9; // max water height [cm]</declaration>
	<template>
		<name>Rain</name>
		<declaration>const int I = 6; // number of intervals. Simulation should finish before the last period is over. Therefore, last period is a large dummy period.
int i = 0; // current interval index

// Exact values =&gt; const int dryL[I] = {233*m, 71*m, 1529*m, 187*m, 226*m, 24*h};
const int dryL[I] = {210*m, 64*m, 1376*m, 168*m, 203*m, 24*h}; // lower bound duration dry period [min]
const int dryU[I] = {256*m, 78*m, 1682*m, 206*m, 249*m, 24*h}; // upper bound duration dry period [min]

// Exact values =&gt; const int rainL[I] = {30*m, 23*m, 55*m, 26*m, 231*m, 24*h};
const int rainL[I] = {27*m, 21*m, 49*m, 23*m, 208*m, 24*h}; // lower bound duration raining period [min]
const int rainU[I] = {33*m, 25*m, 61*m, 29*m, 254*m, 24*h}; // upper bound duration raining period [min]

const double rainmax[I] = {0.01333, 0.03478, 0.02545, 0.02308, 0.00952, 0.0}; // rain intensity [cm/min], 1 mm/min = 0.1 cm/min


clock d = 0.0; // duration of dry or raining period [min]
const double e = 0.1; // rain uncertainty factor.

// Returns a sample from a uniform distribution between lower and upper.
double uniform(double lower, double upper)
{
    double distance = upper - lower;
    double sample = random(distance);
    return lower + sample;
}</declaration>
		<location id="id0" x="-85" y="-8">
			<name x="-136" y="-17">Dry</name>
			<label kind="invariant" x="-153" y="8">d &lt;= dryU[i]</label>
		</location>
		<location id="id1" x="85" y="-8">
			<name x="102" y="-25">Raining</name>
			<label kind="invariant" x="93" y="0">d &lt;= rainU[i]</label>
		</location>
		<init ref="id0"/>
		<transition id="id2" controllable="false">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-51" y="34">d &gt;= rainL[i]</label>
			<label kind="assignment" x="-51" y="51">d = 0,
i++,
rain = 0.0</label>
			<nail x="60" y="34"/>
			<nail x="-59" y="34"/>
		</transition>
		<transition id="id3" controllable="false">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-51" y="-110">d &gt;= dryL[i]</label>
			<label kind="assignment" x="-51" y="-93">d = 0,
rain = rainmax[i]*uniform(1 - e, 1 + e)</label>
			<nail x="-68" y="-51"/>
			<nail x="68" y="-51"/>
		</transition>
	</template>
	<template>
		<name>UrbanCatchment</name>
		<location id="id4" x="0" y="0">
			<label kind="invariant" x="-85" y="17">S_UC' == rain - (S_UC * UC_k)</label>
		</location>
		<init ref="id4"/>
	</template>
	<template>
		<name>Pond</name>
		<declaration>// We assume as pond geometry an inverted pyramid with square base, where the base is the surface of the permanent water level. 
// H represents the height of the pyramid, L represents the area of the pyramid.
const double H = 1000000.0; // pond geometry H [cm]
const double L = 7464.5; // pond geometry L [cm], 7464.5 -&gt; 5572 m2 area

// Flow from urban catchment to pond. Eq. 2 in paper.
double Qin()
{
    return S_UC * UC_k * A_UC;
}

// Dynamics of the water level. Eqs. 4 and 5 in the paper combined.
double pond_dynamics()
{
    if (w &lt;= 0 &amp;&amp; Qin() &lt;= Qout) return 0;

    else if (w &gt;= W &amp;&amp; Qin() &gt;= Qout) return 0; 

    else return H*H/(L*L)/((w+H)*(w+H))*(Qin()-Qout);
}

// Cummulative overflow duration. Eq. 6 in the paper.
double overflow()
{
    const double epsilon = 0.1; // for numerical precision 
    if (w &gt;= W - epsilon) return 1.0;
    
    else return 0.0;
}


//.........................
// Noise functions 
//.........................

const double e = 0.1; // sensor uncertainty factor. 

// noise function - uniform distribution (from Martijn) 
double uniform(double lower, double upper)
{
    double distance = upper - lower; 
    double sample = random(distance); 
    return lower + sample; 
}

</declaration>
		<location id="id5" x="0" y="0">
			<label kind="invariant" x="-76" y="17">w' == pond_dynamics() &amp;&amp;
o' == overflow()</label>
			<label kind="exponentialrate" x="-25" y="-8">1</label>
		</location>
		<init ref="id5"/>
	</template>
	<template>
		<name>Controller</name>
		<declaration>const int P = h; // control switching period [min]
const double Qomax = 60.0 * 95000.0; // max outflow [cm3/min], 95000 cm3/s = 95 l/s
const int C = 3; // number of control modes
const double Qoutv[C] = {(1.0/6.0)*Qomax, (2.0/3.0)*Qomax, (3.0/3.0)*Qomax}; // outflow modes
clock x = 0.0; // control switching clock

</declaration>
		<location id="id6" x="0" y="0">
			<label kind="invariant" x="-25" y="17">x&lt;=(P+1)</label>
		</location>
		<location id="id7" x="-178" y="0">
			<urgent/>
		</location>
		<location id="id8" x="136" y="0">
			<urgent/>
		</location>
		<init ref="id7"/>
		<transition id="id9">
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="select" x="17" y="-102">i:int[0,C-1]</label>
			<label kind="assignment" x="0" y="-85">x=0, Qout=Qoutv[i]</label>
			<nail x="136" y="-59"/>
			<nail x="0" y="-59"/>
		</transition>
		<transition id="id10" controllable="false">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="59" y="0">x&gt;=P</label>
		</transition>
		<transition id="id11">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-127" y="-17">i:int[0,C-1]</label>
			<label kind="assignment" x="-144" y="0">Qout=Qoutv[i]</label>
		</transition>
	</template>
	<template>
		<name>CostFunction1</name>
		<declaration>// This cost function from Martijn's ADHS 21 paper. 
// This cost function considers Partical sedimentation, but no overflow. </declaration>
		<location id="id12" x="-246" y="-17">
			<label kind="invariant" x="-365" y="0">c1' == (1-(w/W))</label>
		</location>
		<init ref="id12"/>
	</template>
	<template>
		<name>SensorUniform</name>
		<parameter>const double e</parameter>
		<declaration>//..............................
// Esther 
//..............................

clock x = 0.0; // control switching clock

const int S = 10*m; // sensor reading interval [min] - 10 min applied


const int P = 5; // size of sensor reading for partial observation 
const int I = 6*24*3+500; // size of sensor reading for full observation 

// The value from senser will be put to list. 
double po_list[P];
double po=0.0;
double posum=0.0;
//double full_list [I];

int [0,P] len; 
int [0,I] len2; 


//........................
// sensor reading queue
//........................

// Remove the front element of the po_list. It can hold only 5 elements. 
void delist(double element)
{
    int i = 0; 
    len -= 1; 
    while (i&lt;P-1) 
    {
        po_list[i] = po_list[i+1];
        i++;
    }
    po_list[i] = element;
 
   
}

// Put a new element at the end of the list. 
void enlist(double element)
{
    if (len &lt; P)
    {po_list[len] = element;
    }
    else
    {delist(element);}
}

// Impelmentation for Full reading sensor  
/*void fulllist(double element)
{
    full_list[len2] = element;
}*/


// average of enlist 
double avelist()
{
   int i = 0; 
   po = 0.0; 
   posum = 0.0; 
   //len -= 1; 
   if (len2 &lt; P-1){
    while (i &lt; P-1) {
        posum = posum + po_list[i];
        i++;          
        }po = posum/(len+1);
    }

    else{    
        while (i &lt; P) {
            posum = posum + po_list[i];
            i++;
        }
    po = posum/5;
    }    
    return po; 
}

//.........................
// Noise functions 
//.........................

//const double e = 0.1; // sensor uncertainty factor. 

double a = 0.0; // sensor uncertainty factor.


// noise function - uniform distribution (from Martijn) 
double uniform(double lower, double upper)
{
    double distance = upper - lower; 
    double sample = random(distance+0.01); 
    return lower + sample; 
}

</declaration>
		<location id="id13" x="-442" y="-161">
			<name x="-476" y="-212">SensorOff</name>
			<urgent/>
		</location>
		<location id="id14" x="-229" y="-161">
			<name x="-255" y="-212">SensorOn</name>
			<label kind="invariant" x="-263" y="-195">x &lt;= (S+1)</label>
		</location>
		<location id="id15" x="-51" y="-161">
			<name x="-59" y="-212">Detect</name>
			<committed/>
		</location>
		<init ref="id13"/>
		<transition id="id16" controllable="false">
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="assignment" x="-212" y="-93">x = 0, 
w_ud = w + uniform(-e, e)</label>
			<nail x="-51" y="-93"/>
			<nail x="-229" y="-93"/>
		</transition>
		<transition id="id17" controllable="false">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="guard" x="-161" y="-187">x &gt;= S</label>
		</transition>
		<transition id="id18" controllable="false">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="assignment" x="-357" y="-187">x = 0</label>
		</transition>
	</template>
	<template>
		<name>SensorGaussian</name>
		<parameter>const double std</parameter>
		<declaration>//..............................
// Esther 
//..............................

clock x = 0.0; // control switching clock

const int S = 10*m; // sensor reading interval [min] - 10 min applied


const int P = 5; // size of sensor reading for partial observation 
const int I = 6*10*24*3+500; // size of sensor reading for full observation 

// The value from senser will be put to list. 
double po_list[P];
double po=0.0;
double posum=0.0;
double full_list [I];

int [0,P] len; 
int [0,I] len2; 


//........................
// sensor reading queue
//........................

// Remove the front element of the po_list. It can hold only 5 elements. 
void delist(double element)
{
    int i = 0; 
    len -= 1; 
    while (i&lt;P-1) 
    {
        po_list[i] = po_list[i+1];
        i++;
    }
    po_list[i] = element;
 
   
}

// Put a new element at the end of the list. 
void enlist(double element)
{
    if (len &lt; P)
    {po_list[len] = element;
    }
    else
    {delist(element);}
}

// Impelmentation for Full reading sensor  
void fulllist(double element)
{
    full_list[len2] = element;
}


// average of enlist 
double avelist()
{
   int i = 0; 
   po = 0.0; 
   posum = 0.0; 
   //len -= 1; 
   if (len2 &lt; P-1){
    while (i &lt; P-1) {
        posum = posum + po_list[i];
        i++;          
        }po = posum/(len+1);
    }

    else{    
        while (i &lt; P) {
            posum = posum + po_list[i];
            i++;
        }
    po = posum/5;
    }    
    return po; 
}

//.........................
// Noise functions 
//.........................

//const double e = 0.1; // sensor uncertainty factor. 

double a = 0.0; // sensor uncertainty factor.


// noise function - Gaussian distribution  
double gau(double std)
{
    double sample = random_normal(0, std); 
    return sample; 
}

</declaration>
		<location id="id19" x="-433" y="-161">
			<name x="-467" y="-212">SensorOff</name>
			<urgent/>
		</location>
		<location id="id20" x="-229" y="-161">
			<name x="-255" y="-212">SensorOn</name>
			<label kind="invariant" x="-263" y="-195">x &lt;= (S+1)</label>
		</location>
		<location id="id21" x="-51" y="-161">
			<name x="-59" y="-212">Detect</name>
			<committed/>
		</location>
		<init ref="id19"/>
		<transition id="id22" controllable="false">
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="assignment" x="-212" y="-93">x = 0, 
w_gd = w + gau(std)</label>
			<nail x="-51" y="-93"/>
			<nail x="-229" y="-93"/>
		</transition>
		<transition id="id23" controllable="false">
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-161" y="-187">x &gt;= S</label>
		</transition>
		<transition id="id24" controllable="false">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="assignment" x="-357" y="-187">x = 0</label>
		</transition>
	</template>
	<template>
		<name>CostFunction2</name>
		<declaration>// This cost function from Martijn's ADHS 21 paper. 
// This cost function considers Partical sedimentation, but no overflow. </declaration>
		<location id="id25" x="-246" y="-17">
			<label kind="invariant" x="-365" y="0">c2' == 1000*pow(w/W,20) + (1-(w/W))</label>
		</location>
		<init ref="id25"/>
	</template>
	<template>
		<name>CostFunction3</name>
		<declaration>// This cost function from Martijn's ADHS 21 paper. 
// This cost function considers Partical sedimentation, but no overflow. </declaration>
		<location id="id26" x="-246" y="-17">
			<label kind="invariant" x="-365" y="0">c3' == 100*pow(w/W,20) + (1-(w/W))</label>
		</location>
		<init ref="id26"/>
	</template>
	<system>
ga = SensorGaussian(15.0); // If you want to change std, change the value. 
//ga01 = SensorGaussian(5.0, 1);
//ga02 = SensorGaussian(10.0, 2);
//ga03 = SensorGaussian(15.0, 3);

uni = SensorUniform(0.0); // If you want to change error range, change the value. 
//uni01 = SensorGaussian(1.0, 1);
//uni02 = SensorGaussian(2.0, 2);
//uni03 = SensorGaussian(3.0, 3);

system Pond, Rain, Controller, UrbanCatchment, CostFunction1, CostFunction2, CostFunction3, ga, uni;
</system>
	<queries>
		<option key="--total-runs" value="100"/>
		<option key="--discretization" value="0.5"/>
		<option key="--good-runs" value="100"/>
		<option key="--eval-runs" value="20"/>
		<option key="--runs-pr-state" value="100"/>
		<query>
			<formula>// Optimal control (w with Gaussian noise; std = 15.0)</formula>
			<comment/>
		</query>
		<query>
			<formula>strategy opt2_gd15 = minE (c2) [&lt;=72*h] {} -&gt; {rain, w_gd}: &lt;&gt; (t==72*h)</formula>
			<comment>*15000 max runs in approximately 180 minutes.
*Set in options -&gt; statistical parameters the 'discretization step for hybrid systems' to 0.1 to speed up calculation.
*Set in options -&gt; learning parameters the first four parameters to 200, 15000, 100, 100 to speed up the calculation.</comment>
			<result outcome="success" type="quality" timestamp="2022-10-31 14:06:19 +0100">
				<option key="--total-runs" value="100"/>
				<option key="--discretization" value="0.5"/>
				<option key="--good-runs" value="100"/>
				<option key="--eval-runs" value="20"/>
				<option key="--runs-pr-state" value="100"/>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=72*h;10] {w} under opt2_gd15</formula>
			<comment>w: water level height 
This query shows simulation results of water level. </comment>
		</query>
		<query>
			<formula>simulate [&lt;=72*h;10] {c2} under opt2_gd15</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=72*h;10] {Qout} under opt2_gd15</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=72*h; 1000] (max:0) under opt2_gd15</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=72*h; 1000] (max:c2) under opt2_gd15</formula>
			<comment/>
			<result outcome="success" type="quantity" value="3575.39 ± 138.371 (95% CI)" timestamp="2022-10-31 14:07:16 +0100">
				<option key="--total-runs" value="100"/>
				<option key="--discretization" value="0.5"/>
				<option key="--good-runs" value="100"/>
				<option key="--eval-runs" value="20"/>
				<option key="--runs-pr-state" value="100"/>
				<details>3575.39 ± 138.371 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: c2" yaxis="probability density">
					<series title="density" type="b(1035.754094)" color="0x0000ff" encoding="csv">2721.249969274998,8.052104306592187E-4
3757.0040631672136,7.434197021673842E-5
4792.75815705943,3.0895364245917263E-5
5828.512250951646,1.255124172490389E-5
6864.266344843862,8.689321194164232E-6
7900.020438736077,5.792880796109487E-6
8935.774532628293,6.758360928794402E-6
9971.52862652051,7.723841061479316E-6
11007.282720412724,1.930960265369829E-6
12043.036814304942,1.930960265369829E-6
13078.790908197156,9.654801326849145E-7
14114.545002089373,0.0
15150.29909598159,9.654801326849145E-7
16186.053189873805,9.654801326849145E-7
17221.807283766022,1.930960265369829E-6
18257.561377658236,1.930960265369829E-6
19293.315471550453,9.654801326849145E-7
20329.06956544267,0.0
21364.823659334885,0.0
22400.577753227102,0.0
23436.331847119316,0.0
24472.085941011534,0.0
25507.840034903747,0.0
26543.594128795965,0.0
27579.348222688182,0.0
28615.102316580396,0.0
29650.856410472614,9.654801326849145E-7
30686.610504364828,0.0
31722.364598257045,0.0
32758.11869214926,0.0
33793.87278604147,0.0
34829.62687993369,9.654801326849145E-7
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3575.393622870299,0.0
3575.393622870299,8.052104306592187E-4
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1035.8, bucket count=32
Runs: 1000 in total, 1000 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2721, 3.587e+04]
Mean estimate of displayed sample: 3575 ± 138.4 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: c2" yaxis="probability">
					<series title="probability" type="b(1035.754094)" color="0x0000ff" encoding="csv">2721.249969274998,0.834
3757.0040631672136,0.077
4792.75815705943,0.032
5828.512250951646,0.013
6864.266344843862,0.009
7900.020438736077,0.006
8935.774532628293,0.007
9971.52862652051,0.008
11007.282720412724,0.002
12043.036814304942,0.002
13078.790908197156,0.001
14114.545002089373,0.0
15150.29909598159,0.001
16186.053189873805,0.001
17221.807283766022,0.002
18257.561377658236,0.002
19293.315471550453,0.001
20329.06956544267,0.0
21364.823659334885,0.0
22400.577753227102,0.0
23436.331847119316,0.0
24472.085941011534,0.0
25507.840034903747,0.0
26543.594128795965,0.0
27579.348222688182,0.0
28615.102316580396,0.0
29650.856410472614,0.001
30686.610504364828,0.0
31722.364598257045,0.0
32758.11869214926,0.0
33793.87278604147,0.0
34829.62687993369,0.001
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3575.393622870299,0.0
3575.393622870299,0.834
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1035.8, bucket count=32
Runs: 1000 in total, 1000 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2721, 3.587e+04]
Mean estimate of displayed sample: 3575 ± 138.4 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: c2" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2721.249969274998,0.0
3757.0040631672136,0.834
4792.75815705943,0.911
5828.512250951646,0.943
6864.266344843862,0.956
7900.020438736077,0.965
8935.774532628293,0.971
9971.52862652051,0.978
11007.282720412724,0.986
12043.036814304942,0.988
13078.790908197156,0.99
14114.545002089373,0.991
15150.29909598159,0.991
16186.053189873805,0.992
17221.807283766022,0.993
18257.561377658236,0.995
19293.315471550453,0.997
20329.06956544267,0.998
21364.823659334885,0.998
22400.577753227102,0.998
23436.331847119316,0.998
24472.085941011534,0.998
25507.840034903747,0.998
26543.594128795965,0.998
27579.348222688182,0.998
28615.102316580396,0.998
29650.856410472614,0.998
30686.610504364828,0.999
31722.364598257045,0.999
32758.11869214926,0.999
33793.87278604147,0.999
34829.62687993369,0.999
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3575.393622870299,0.0
3575.393622870299,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1035.8, bucket count=32
Runs: 1000 in total, 1000 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2721, 3.587e+04]
Mean estimate of displayed sample: 3575 ± 138.4 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: c2" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">2721.249969274998,0.003682083896865672
3757.0040631672136,0.8565513384158628
4792.75815705943,0.9279175354602401
5828.512250951646,0.9565464180630414
6864.266344843862,0.9678505029891286
7900.020438736077,0.9755024721052413
8935.774532628293,0.9804940626756153
9971.52862652051,0.9861625858279262
11007.282720412724,0.9923254984349792
12043.036814304942,0.9937844744404047
13078.790908197156,0.9951944893089507
14114.545002089373,0.9958766043396575
15150.29909598159,0.9958766043396575
16186.053189873805,0.9965400238346707
17221.807283766022,0.9971811412403795
18257.561377658236,0.9983745804824372
19293.315471550453,0.9993809000683505
20329.06956544267,0.9997576988831227
21364.823659334885,0.9997576988831227
22400.577753227102,0.9997576988831227
23436.331847119316,0.9997576988831227
24472.085941011534,0.9997576988831227
25507.840034903747,0.9997576988831227
26543.594128795965,0.9997576988831227
27579.348222688182,0.9997576988831227
28615.102316580396,0.9997576988831227
29650.856410472614,0.9997576988831227
30686.610504364828,0.9999746825125088
31722.364598257045,0.9999746825125088
32758.11869214926,0.9999746825125088
33793.87278604147,0.9999746825125088
34829.62687993369,0.9999746825125088
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">2721.249969274998,0.0
3757.0040631672136,0.8094632114581198
4792.75815705943,0.8916189999399975
5828.512250951646,0.9267772705393378
6864.266344843862,0.9413795807936691
7900.020438736077,0.9516576183857783
8935.774532628293,0.958615280883598
9971.52862652051,0.9668803354850122
11007.282720412724,0.9766218439896855
12043.036814304942,0.9791323204089636
13078.790908197156,0.9816867569448875
14114.545002089373,0.9829842169301054
15150.29909598159,0.9829842169301054
16186.053189873805,0.9842979508239253
17221.807283766022,0.9856308050210814
18257.561377658236,0.9883705294401879
19293.315471550453,0.9912579767615217
20329.06956544267,0.9927941610885425
21364.823659334885,0.9927941610885425
22400.577753227102,0.9927941610885425
23436.331847119316,0.9927941610885425
24472.085941011534,0.9927941610885425
25507.840034903747,0.9927941610885425
26543.594128795965,0.9927941610885425
27579.348222688182,0.9927941610885425
28615.102316580396,0.9927941610885425
29650.856410472614,0.9927941610885425
30686.610504364828,0.9944410757201734
31722.364598257045,0.9944410757201734
32758.11869214926,0.9944410757201734
33793.87278604147,0.9944410757201734
34829.62687993369,0.9944410757201734
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2721.249969274998,0.0
3757.0040631672136,0.834
4792.75815705943,0.911
5828.512250951646,0.943
6864.266344843862,0.956
7900.020438736077,0.965
8935.774532628293,0.971
9971.52862652051,0.978
11007.282720412724,0.986
12043.036814304942,0.988
13078.790908197156,0.99
14114.545002089373,0.991
15150.29909598159,0.991
16186.053189873805,0.992
17221.807283766022,0.993
18257.561377658236,0.995
19293.315471550453,0.997
20329.06956544267,0.998
21364.823659334885,0.998
22400.577753227102,0.998
23436.331847119316,0.998
24472.085941011534,0.998
25507.840034903747,0.998
26543.594128795965,0.998
27579.348222688182,0.998
28615.102316580396,0.998
29650.856410472614,0.998
30686.610504364828,0.999
31722.364598257045,0.999
32758.11869214926,0.999
33793.87278604147,0.999
34829.62687993369,0.999
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3575.393622870299,0.0
3575.393622870299,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1035.8, bucket count=32
Runs: 1000 in total, 1000 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2721, 3.587e+04]
Mean estimate of displayed sample: 3575 ± 138.4 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: c2" yaxis="count">
					<series title="count" type="b(1035.754094)" color="0x0000ff" encoding="csv">2721.249969274998,834.0
3757.0040631672136,77.0
4792.75815705943,32.0
5828.512250951646,13.0
6864.266344843862,9.0
7900.020438736077,6.0
8935.774532628293,7.0
9971.52862652051,8.0
11007.282720412724,2.0
12043.036814304942,2.0
13078.790908197156,1.0
14114.545002089373,0.0
15150.29909598159,1.0
16186.053189873805,1.0
17221.807283766022,2.0
18257.561377658236,2.0
19293.315471550453,1.0
20329.06956544267,0.0
21364.823659334885,0.0
22400.577753227102,0.0
23436.331847119316,0.0
24472.085941011534,0.0
25507.840034903747,0.0
26543.594128795965,0.0
27579.348222688182,0.0
28615.102316580396,0.0
29650.856410472614,1.0
30686.610504364828,0.0
31722.364598257045,0.0
32758.11869214926,0.0
33793.87278604147,0.0
34829.62687993369,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3575.393622870299,0.0
3575.393622870299,834.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1035.8, bucket count=32
Runs: 1000 in total, 1000 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2721, 3.587e+04]
Mean estimate of displayed sample: 3575 ± 138.4 (95% CI)</comment>
				</plot>
			</result>
		</query>
	</queries>
</nta>
