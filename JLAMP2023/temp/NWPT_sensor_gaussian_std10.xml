<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.5//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_5.dtd'>
<nta>
	<declaration>// Global time. One time unit in Uppaal represents 1 minute
const int m = 1; // 1 minute = 1 time unit
const int h = 60*m; // 1 hour = 60 minutes
clock t; // global time [min]

// Urban catchment
const double UC_k = 0.25; // Urban surface resevoir reaction factor [cm/min * 1 / cm]
const double A_UC = 37.0 * 10000.0 * 10000.0; // urban area catchment [cm2], 1 ha = 10000 m2, 1 m2 = 10000 cm2 = [cm/(min*cm)]
double rain = 0.0; // Rainfall [cm/min]
clock S_UC = 0.0; // Water surface height urban catchment [cm]

// Rain detention pond
const int W = 300; // max water height [cm]
clock w = 100.0; // water level in pond [cm]
double Qout = 0.0; // pond outflow [cm3/min], will be properly initialized in Controller
clock o = 0.0; // accumelated overflow time [min]

// Cost function
clock c = 0.0; // cost function [-]

//.....................
// Esther 
//.....................

const int A = 8;

// Sensor for reading pond's water height with uniform distribution 
double w_ud = 0.0;
//double w_ud[A];
//double w_udpo[A];

// Sensor for reading pond's water height with normal distribution 
double w_gd = 0.0;
//double w_gd[A];
//double w_gdpo[A];

// Cost function
clock c1 = 0.0; // cost function [-]
clock c2 = 0.0; // cost function [-]
clock c3 = 0.0; // cost function [-]

// Rain detention pond
//const int WR = 300 * 0.9; // max water height [cm]</declaration>
	<template>
		<name>Rain</name>
		<declaration>const int I = 6; // number of intervals. Simulation should finish before the last period is over. Therefore, last period is a large dummy period.
int i = 0; // current interval index

// Exact values =&gt; const int dryL[I] = {233*m, 71*m, 1529*m, 187*m, 226*m, 24*h};
const int dryL[I] = {210*m, 64*m, 1376*m, 168*m, 203*m, 24*h}; // lower bound duration dry period [min]
const int dryU[I] = {256*m, 78*m, 1682*m, 206*m, 249*m, 24*h}; // upper bound duration dry period [min]

// Exact values =&gt; const int rainL[I] = {30*m, 23*m, 55*m, 26*m, 231*m, 24*h};
const int rainL[I] = {27*m, 21*m, 49*m, 23*m, 208*m, 24*h}; // lower bound duration raining period [min]
const int rainU[I] = {33*m, 25*m, 61*m, 29*m, 254*m, 24*h}; // upper bound duration raining period [min]

const double rainmax[I] = {0.01333, 0.03478, 0.02545, 0.02308, 0.00952, 0.0}; // rain intensity [cm/min], 1 mm/min = 0.1 cm/min


clock d = 0.0; // duration of dry or raining period [min]
const double e = 0.1; // rain uncertainty factor.

// Returns a sample from a uniform distribution between lower and upper.
double uniform(double lower, double upper)
{
    double distance = upper - lower;
    double sample = random(distance);
    return lower + sample;
}</declaration>
		<location id="id0" x="-85" y="-8">
			<name x="-136" y="-17">Dry</name>
			<label kind="invariant" x="-153" y="8">d &lt;= dryU[i]</label>
		</location>
		<location id="id1" x="85" y="-8">
			<name x="102" y="-25">Raining</name>
			<label kind="invariant" x="93" y="0">d &lt;= rainU[i]</label>
		</location>
		<init ref="id0"/>
		<transition id="id2" controllable="false">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-51" y="34">d &gt;= rainL[i]</label>
			<label kind="assignment" x="-51" y="51">d = 0,
i++,
rain = 0.0</label>
			<nail x="60" y="34"/>
			<nail x="-59" y="34"/>
		</transition>
		<transition id="id3" controllable="false">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-51" y="-110">d &gt;= dryL[i]</label>
			<label kind="assignment" x="-51" y="-93">d = 0,
rain = rainmax[i]*uniform(1 - e, 1 + e)</label>
			<nail x="-68" y="-51"/>
			<nail x="68" y="-51"/>
		</transition>
	</template>
	<template>
		<name>UrbanCatchment</name>
		<location id="id4" x="0" y="0">
			<label kind="invariant" x="-85" y="17">S_UC' == rain - (S_UC * UC_k)</label>
		</location>
		<init ref="id4"/>
	</template>
	<template>
		<name>Pond</name>
		<declaration>// We assume as pond geometry an inverted pyramid with square base, where the base is the surface of the permanent water level. 
// H represents the height of the pyramid, L represents the area of the pyramid.
const double H = 1000000.0; // pond geometry H [cm]
const double L = 7464.5; // pond geometry L [cm], 7464.5 -&gt; 5572 m2 area

// Flow from urban catchment to pond. Eq. 2 in paper.
double Qin()
{
    return S_UC * UC_k * A_UC;
}

// Dynamics of the water level. Eqs. 4 and 5 in the paper combined.
double pond_dynamics()
{
    if (w &lt;= 0 &amp;&amp; Qin() &lt;= Qout) return 0;

    else if (w &gt;= W &amp;&amp; Qin() &gt;= Qout) return 0; 

    else return H*H/(L*L)/((w+H)*(w+H))*(Qin()-Qout);
}

// Cummulative overflow duration. Eq. 6 in the paper.
double overflow()
{
    const double epsilon = 0.1; // for numerical precision 
    if (w &gt;= W - epsilon) return 1.0;
    
    else return 0.0;
}


//.........................
// Noise functions 
//.........................

const double e = 0.1; // sensor uncertainty factor. 

// noise function - uniform distribution (from Martijn) 
double uniform(double lower, double upper)
{
    double distance = upper - lower; 
    double sample = random(distance); 
    return lower + sample; 
}

</declaration>
		<location id="id5" x="0" y="0">
			<label kind="invariant" x="-76" y="17">w' == pond_dynamics() &amp;&amp;
o' == overflow()</label>
			<label kind="exponentialrate" x="-25" y="-8">1</label>
		</location>
		<init ref="id5"/>
	</template>
	<template>
		<name>Controller</name>
		<declaration>const int P = h; // control switching period [min]
const double Qomax = 60.0 * 95000.0; // max outflow [cm3/min], 95000 cm3/s = 95 l/s
const int C = 3; // number of control modes
const double Qoutv[C] = {(1.0/6.0)*Qomax, (2.0/3.0)*Qomax, (3.0/3.0)*Qomax}; // outflow modes
clock x = 0.0; // control switching clock

</declaration>
		<location id="id6" x="0" y="0">
			<label kind="invariant" x="-25" y="17">x&lt;=(P+1)</label>
		</location>
		<location id="id7" x="-178" y="0">
			<urgent/>
		</location>
		<location id="id8" x="136" y="0">
			<urgent/>
		</location>
		<init ref="id7"/>
		<transition id="id9">
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="select" x="17" y="-102">i:int[0,C-1]</label>
			<label kind="assignment" x="0" y="-85">x=0, Qout=Qoutv[i]</label>
			<nail x="136" y="-59"/>
			<nail x="0" y="-59"/>
		</transition>
		<transition id="id10" controllable="false">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="59" y="0">x&gt;=P</label>
		</transition>
		<transition id="id11">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-127" y="-17">i:int[0,C-1]</label>
			<label kind="assignment" x="-144" y="0">Qout=Qoutv[i]</label>
		</transition>
	</template>
	<template>
		<name>CostFunction1</name>
		<declaration>// This cost function from Martijn's ADHS 21 paper. 
// This cost function considers Partical sedimentation, but no overflow. </declaration>
		<location id="id12" x="-246" y="-17">
			<label kind="invariant" x="-365" y="0">c1' == (1-(w/W))</label>
		</location>
		<init ref="id12"/>
	</template>
	<template>
		<name>SensorUniform</name>
		<parameter>const double e</parameter>
		<declaration>//..............................
// Esther 
//..............................

clock x = 0.0; // control switching clock

const int S = 10*m; // sensor reading interval [min] - 10 min applied


const int P = 5; // size of sensor reading for partial observation 
const int I = 6*24*3+500; // size of sensor reading for full observation 

// The value from senser will be put to list. 
double po_list[P];
double po=0.0;
double posum=0.0;
//double full_list [I];

int [0,P] len; 
int [0,I] len2; 


//........................
// sensor reading queue
//........................

// Remove the front element of the po_list. It can hold only 5 elements. 
void delist(double element)
{
    int i = 0; 
    len -= 1; 
    while (i&lt;P-1) 
    {
        po_list[i] = po_list[i+1];
        i++;
    }
    po_list[i] = element;
 
   
}

// Put a new element at the end of the list. 
void enlist(double element)
{
    if (len &lt; P)
    {po_list[len] = element;
    }
    else
    {delist(element);}
}

// Impelmentation for Full reading sensor  
/*void fulllist(double element)
{
    full_list[len2] = element;
}*/


// average of enlist 
double avelist()
{
   int i = 0; 
   po = 0.0; 
   posum = 0.0; 
   //len -= 1; 
   if (len2 &lt; P-1){
    while (i &lt; P-1) {
        posum = posum + po_list[i];
        i++;          
        }po = posum/(len+1);
    }

    else{    
        while (i &lt; P) {
            posum = posum + po_list[i];
            i++;
        }
    po = posum/5;
    }    
    return po; 
}

//.........................
// Noise functions 
//.........................

//const double e = 0.1; // sensor uncertainty factor. 

double a = 0.0; // sensor uncertainty factor.


// noise function - uniform distribution (from Martijn) 
double uniform(double lower, double upper)
{
    double distance = upper - lower; 
    double sample = random(distance+0.01); 
    return lower + sample; 
}

</declaration>
		<location id="id13" x="-442" y="-161">
			<name x="-476" y="-212">SensorOff</name>
			<urgent/>
		</location>
		<location id="id14" x="-229" y="-161">
			<name x="-255" y="-212">SensorOn</name>
			<label kind="invariant" x="-263" y="-195">x &lt;= (S+1)</label>
		</location>
		<location id="id15" x="-51" y="-161">
			<name x="-59" y="-212">Detect</name>
			<committed/>
		</location>
		<init ref="id13"/>
		<transition id="id16" controllable="false">
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="assignment" x="-212" y="-93">x = 0, 
w_ud = w + uniform(-e, e)</label>
			<nail x="-51" y="-93"/>
			<nail x="-229" y="-93"/>
		</transition>
		<transition id="id17" controllable="false">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="guard" x="-161" y="-187">x &gt;= S</label>
		</transition>
		<transition id="id18" controllable="false">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="assignment" x="-357" y="-187">x = 0</label>
		</transition>
	</template>
	<template>
		<name>SensorGaussian</name>
		<parameter>const double std</parameter>
		<declaration>//..............................
// Esther 
//..............................

clock x = 0.0; // control switching clock

const int S = 10*m; // sensor reading interval [min] - 10 min applied


const int P = 5; // size of sensor reading for partial observation 
const int I = 6*10*24*3+500; // size of sensor reading for full observation 

// The value from senser will be put to list. 
double po_list[P];
double po=0.0;
double posum=0.0;
double full_list [I];

int [0,P] len; 
int [0,I] len2; 


//........................
// sensor reading queue
//........................

// Remove the front element of the po_list. It can hold only 5 elements. 
void delist(double element)
{
    int i = 0; 
    len -= 1; 
    while (i&lt;P-1) 
    {
        po_list[i] = po_list[i+1];
        i++;
    }
    po_list[i] = element;
 
   
}

// Put a new element at the end of the list. 
void enlist(double element)
{
    if (len &lt; P)
    {po_list[len] = element;
    }
    else
    {delist(element);}
}

// Impelmentation for Full reading sensor  
void fulllist(double element)
{
    full_list[len2] = element;
}


// average of enlist 
double avelist()
{
   int i = 0; 
   po = 0.0; 
   posum = 0.0; 
   //len -= 1; 
   if (len2 &lt; P-1){
    while (i &lt; P-1) {
        posum = posum + po_list[i];
        i++;          
        }po = posum/(len+1);
    }

    else{    
        while (i &lt; P) {
            posum = posum + po_list[i];
            i++;
        }
    po = posum/5;
    }    
    return po; 
}

//.........................
// Noise functions 
//.........................

//const double e = 0.1; // sensor uncertainty factor. 

double a = 0.0; // sensor uncertainty factor.


// noise function - Gaussian distribution  
double gau(double std)
{
    double sample = random_normal(0, std); 
    return sample; 
}

</declaration>
		<location id="id19" x="-433" y="-161">
			<name x="-467" y="-212">SensorOff</name>
			<urgent/>
		</location>
		<location id="id20" x="-229" y="-161">
			<name x="-255" y="-212">SensorOn</name>
			<label kind="invariant" x="-263" y="-195">x &lt;= (S+1)</label>
		</location>
		<location id="id21" x="-51" y="-161">
			<name x="-59" y="-212">Detect</name>
			<committed/>
		</location>
		<init ref="id19"/>
		<transition id="id22" controllable="false">
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="assignment" x="-212" y="-93">x = 0, 
w_gd = w + gau(std)</label>
			<nail x="-51" y="-93"/>
			<nail x="-229" y="-93"/>
		</transition>
		<transition id="id23" controllable="false">
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-161" y="-187">x &gt;= S</label>
		</transition>
		<transition id="id24" controllable="false">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="assignment" x="-357" y="-187">x = 0</label>
		</transition>
	</template>
	<template>
		<name>CostFunction2</name>
		<declaration>// This cost function from Martijn's ADHS 21 paper. 
// This cost function considers Partical sedimentation, but no overflow. </declaration>
		<location id="id25" x="-246" y="-17">
			<label kind="invariant" x="-365" y="0">c2' == 1000*pow(w/W,20) + (1-(w/W))</label>
		</location>
		<init ref="id25"/>
	</template>
	<template>
		<name>CostFunction3</name>
		<declaration>// This cost function from Martijn's ADHS 21 paper. 
// This cost function considers Partical sedimentation, but no overflow. </declaration>
		<location id="id26" x="-246" y="-17">
			<label kind="invariant" x="-365" y="0">c3' == 100*pow(w/W,20) + (1-(w/W))</label>
		</location>
		<init ref="id26"/>
	</template>
	<system>
ga = SensorGaussian(10.0); // If you want to change std, change the value. 
//ga01 = SensorGaussian(5.0, 1);
//ga02 = SensorGaussian(10.0, 2);
//ga03 = SensorGaussian(15.0, 3);

uni = SensorUniform(0.0); // If you want to change error range, change the value. 
//uni01 = SensorGaussian(1.0, 1);
//uni02 = SensorGaussian(2.0, 2);
//uni03 = SensorGaussian(3.0, 3);

system Pond, Rain, Controller, UrbanCatchment, CostFunction1, CostFunction2, CostFunction3, ga, uni;
</system>
	<queries>
		<option key="--total-runs" value="200"/>
		<option key="--discretization" value="0.5"/>
		<option key="--good-runs" value="200"/>
		<option key="--eval-runs" value="20"/>
		<option key="--runs-pr-state" value="200"/>
		<query>
			<formula>// Optimal control (w with Gaussian noise; std = 10.0)</formula>
			<comment/>
		</query>
		<query>
			<formula>strategy opt2_gd10 = minE (c2) [&lt;=72*h] {} -&gt; {rain, w_gd}: &lt;&gt; (t==72*h)</formula>
			<comment>*15000 max runs in approximately 180 minutes.
*Set in options -&gt; statistical parameters the 'discretization step for hybrid systems' to 0.1 to speed up calculation.
*Set in options -&gt; learning parameters the first four parameters to 200, 15000, 100, 100 to speed up the calculation.</comment>
			<result outcome="success" type="quality" timestamp="2022-10-31 14:40:31 +0100">
				<option key="--total-runs" value="200"/>
				<option key="--discretization" value="0.5"/>
				<option key="--good-runs" value="200"/>
				<option key="--eval-runs" value="20"/>
				<option key="--runs-pr-state" value="200"/>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=72*h;10] {w} under opt2_gd10</formula>
			<comment>w: water level height 
This query shows simulation results of water level. </comment>
		</query>
		<query>
			<formula>simulate [&lt;=72*h;10] {c2} under opt2_gd10</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=72*h;10] {Qout} under opt2_gd10</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=72*h; 1000] (max:0) under opt2_gd10</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=72*h; 1000] (max:c2) under opt2_gd10</formula>
			<comment/>
			<result outcome="success" type="quantity" value="3323.01 ± 82.9044 (95% CI)" timestamp="2022-10-31 14:43:15 +0100">
				<option key="--total-runs" value="200"/>
				<option key="--discretization" value="0.5"/>
				<option key="--good-runs" value="200"/>
				<option key="--eval-runs" value="20"/>
				<option key="--runs-pr-state" value="200"/>
				<details>3323.01 ± 82.9044 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: c2" yaxis="probability density">
					<series title="density" type="b(611.934144)" color="0x0000ff" encoding="csv">2808.864497551394,0.0013677942432791547
3420.7986419687395,1.2746469650630116E-4
4032.7327863860846,4.9024883271654294E-5
4644.666930803431,2.9414929962992575E-5
5256.601075220776,1.4707464981496288E-5
5868.535219638121,6.536651102887239E-6
6480.469364055467,6.536651102887239E-6
7092.403508472813,6.536651102887239E-6
7704.337652890157,0.0
8316.271797307503,8.170813878609048E-6
8928.20594172485,3.2683255514436197E-6
9540.140086142193,3.2683255514436197E-6
10152.07423055954,4.9024883271654295E-6
10764.008374976886,1.6341627757218098E-6
11375.942519394232,0.0
11987.876663811576,0.0
12599.810808228922,0.0
13211.744952646268,0.0
13823.679097063612,0.0
14435.613241480958,0.0
15047.547385898304,0.0
15659.481530315648,0.0
16271.415674732994,1.6341627757218098E-6
16883.34981915034,0.0
17495.283963567683,0.0
18107.21810798503,0.0
18719.152252402375,0.0
19331.08639681972,0.0
19943.020541237067,0.0
20554.95468565441,0.0
21166.888830071755,0.0
21778.822974489103,3.2683255514436197E-6
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3323.0105376420024,0.0
3323.0105376420024,0.0013677942432791547
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=611.93, bucket count=32
Runs: 1000 in total, 1000 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2808.9, 22391]
Mean estimate of displayed sample: 3323 ± 82.904 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: c2" yaxis="probability">
					<series title="probability" type="b(611.934144)" color="0x0000ff" encoding="csv">2808.864497551394,0.837
3420.7986419687395,0.078
4032.7327863860846,0.03
4644.666930803431,0.018
5256.601075220776,0.009
5868.535219638121,0.004
6480.469364055467,0.004
7092.403508472813,0.004
7704.337652890157,0.0
8316.271797307503,0.005
8928.20594172485,0.002
9540.140086142193,0.002
10152.07423055954,0.003
10764.008374976886,0.001
11375.942519394232,0.0
11987.876663811576,0.0
12599.810808228922,0.0
13211.744952646268,0.0
13823.679097063612,0.0
14435.613241480958,0.0
15047.547385898304,0.0
15659.481530315648,0.0
16271.415674732994,0.001
16883.34981915034,0.0
17495.283963567683,0.0
18107.21810798503,0.0
18719.152252402375,0.0
19331.08639681972,0.0
19943.020541237067,0.0
20554.95468565441,0.0
21166.888830071755,0.0
21778.822974489103,0.002
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3323.0105376420024,0.0
3323.0105376420024,0.837
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=611.93, bucket count=32
Runs: 1000 in total, 1000 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2808.9, 22391]
Mean estimate of displayed sample: 3323 ± 82.904 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: c2" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2808.864497551394,0.0
3420.7986419687395,0.837
4032.7327863860846,0.915
4644.666930803431,0.945
5256.601075220776,0.963
5868.535219638121,0.972
6480.469364055467,0.976
7092.403508472813,0.98
7704.337652890157,0.984
8316.271797307503,0.984
8928.20594172485,0.989
9540.140086142193,0.991
10152.07423055954,0.993
10764.008374976886,0.996
11375.942519394232,0.997
11987.876663811576,0.997
12599.810808228922,0.997
13211.744952646268,0.997
13823.679097063612,0.997
14435.613241480958,0.997
15047.547385898304,0.997
15659.481530315648,0.997
16271.415674732994,0.997
16883.34981915034,0.998
17495.283963567683,0.998
18107.21810798503,0.998
18719.152252402375,0.998
19331.08639681972,0.998
19943.020541237067,0.998
20554.95468565441,0.998
21166.888830071755,0.998
21778.822974489103,0.998
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3323.0105376420024,0.0
3323.0105376420024,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=611.93, bucket count=32
Runs: 1000 in total, 1000 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2808.9, 22391]
Mean estimate of displayed sample: 3323 ± 82.904 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: c2" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">2808.864497551394,0.003682083896865672
3420.7986419687395,0.8593744596403597
4032.7327863860846,0.9315427212290098
4644.666930803431,0.958301204920464
5256.601075220776,0.9738172911562627
5868.535219638121,0.9813153138044625
6480.469364055467,0.9845636167664915
7092.403508472813,0.9877417320275936
7704.337652890157,0.9908276807307779
8316.271797307503,0.9908276807307779
8928.20594172485,0.9944964058076864
9540.140086142193,0.9958766043396575
10152.07423055954,0.9971811412403795
10764.008374976886,0.9989090920122741
11375.942519394232,0.9993809000683505
11987.876663811576,0.9993809000683505
12599.810808228922,0.9993809000683505
13211.744952646268,0.9993809000683505
13823.679097063612,0.9993809000683505
14435.613241480958,0.9993809000683505
15047.547385898304,0.9993809000683505
15659.481530315648,0.9993809000683505
16271.415674732994,0.9993809000683505
16883.34981915034,0.9997576988831227
17495.283963567683,0.9997576988831227
18107.21810798503,0.9997576988831227
18719.152252402375,0.9997576988831227
19331.08639681972,0.9997576988831227
19943.020541237067,0.9997576988831227
20554.95468565441,0.9997576988831227
21166.888830071755,0.9997576988831227
21778.822974489103,0.9997576988831227
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">2808.864497551394,0.0
3420.7986419687395,0.812621856215511
4032.7327863860846,0.8959680142216228
4644.666930803431,0.9290084844579425
5256.601075220776,0.9493588769400751
5868.535219638121,0.9597851126261567
6480.469364055467,0.9644993614686408
7092.403508472813,0.9692799673173909
7704.337652890157,0.9741467509186266
8316.271797307503,0.9741467509186266
8928.20594172485,0.9804033717779835
9540.140086142193,0.9829842169301054
10152.07423055954,0.9856308050210814
10764.008374976886,0.9897903353160701
11375.942519394232,0.9912579767615217
11987.876663811576,0.9912579767615217
12599.810808228922,0.9912579767615217
13211.744952646268,0.9912579767615217
13823.679097063612,0.9912579767615217
14435.613241480958,0.9912579767615217
15047.547385898304,0.9912579767615217
15659.481530315648,0.9912579767615217
16271.415674732994,0.9912579767615217
16883.34981915034,0.9927941610885425
17495.283963567683,0.9927941610885425
18107.21810798503,0.9927941610885425
18719.152252402375,0.9927941610885425
19331.08639681972,0.9927941610885425
19943.020541237067,0.9927941610885425
20554.95468565441,0.9927941610885425
21166.888830071755,0.9927941610885425
21778.822974489103,0.9927941610885425
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2808.864497551394,0.0
3420.7986419687395,0.837
4032.7327863860846,0.915
4644.666930803431,0.945
5256.601075220776,0.963
5868.535219638121,0.972
6480.469364055467,0.976
7092.403508472813,0.98
7704.337652890157,0.984
8316.271797307503,0.984
8928.20594172485,0.989
9540.140086142193,0.991
10152.07423055954,0.993
10764.008374976886,0.996
11375.942519394232,0.997
11987.876663811576,0.997
12599.810808228922,0.997
13211.744952646268,0.997
13823.679097063612,0.997
14435.613241480958,0.997
15047.547385898304,0.997
15659.481530315648,0.997
16271.415674732994,0.997
16883.34981915034,0.998
17495.283963567683,0.998
18107.21810798503,0.998
18719.152252402375,0.998
19331.08639681972,0.998
19943.020541237067,0.998
20554.95468565441,0.998
21166.888830071755,0.998
21778.822974489103,0.998
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3323.0105376420024,0.0
3323.0105376420024,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=611.93, bucket count=32
Runs: 1000 in total, 1000 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2808.9, 22391]
Mean estimate of displayed sample: 3323 ± 82.904 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: c2" yaxis="count">
					<series title="count" type="b(611.934144)" color="0x0000ff" encoding="csv">2808.864497551394,837.0
3420.7986419687395,78.0
4032.7327863860846,30.0
4644.666930803431,18.0
5256.601075220776,9.0
5868.535219638121,4.0
6480.469364055467,4.0
7092.403508472813,4.0
7704.337652890157,0.0
8316.271797307503,5.0
8928.20594172485,2.0
9540.140086142193,2.0
10152.07423055954,3.0
10764.008374976886,1.0
11375.942519394232,0.0
11987.876663811576,0.0
12599.810808228922,0.0
13211.744952646268,0.0
13823.679097063612,0.0
14435.613241480958,0.0
15047.547385898304,0.0
15659.481530315648,0.0
16271.415674732994,1.0
16883.34981915034,0.0
17495.283963567683,0.0
18107.21810798503,0.0
18719.152252402375,0.0
19331.08639681972,0.0
19943.020541237067,0.0
20554.95468565441,0.0
21166.888830071755,0.0
21778.822974489103,2.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3323.0105376420024,0.0
3323.0105376420024,837.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=611.93, bucket count=32
Runs: 1000 in total, 1000 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2808.9, 22391]
Mean estimate of displayed sample: 3323 ± 82.904 (95% CI)</comment>
				</plot>
			</result>
		</query>
	</queries>
</nta>
